{
  "version": 3,
  "sources": ["../src/renderer/util.ts", "../src/getCanvasAndContext.ts", "../src/getImage.ts", "../src/renderer/TileMapLayer.ts", "../src/renderer/TileMap.ts", "../src/index.ts"],
  "sourcesContent": ["export function getBuffer(gl: WebGLRenderingContext) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) throw \"gl.createBuffer()\";\r\n\r\n  return buffer;\r\n}\r\n\r\nexport function getTexture(gl: WebGLRenderingContext) {\r\n  const texture = gl.createTexture();\r\n  if (!texture) throw \"gl.createTexture()\";\r\n\r\n  return texture;\r\n}\r\n\r\nexport function getShader(\r\n  gl: WebGLRenderingContext,\r\n  type: number,\r\n  source: string\r\n) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) throw \"gl.createShader()\";\r\n\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const info = gl.getShaderInfoLog(shader);\r\n    throw `Could not compile WebGL shader. \\n\\n${info}`;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\nexport function getProgram(\r\n  gl: WebGLRenderingContext,\r\n  vertexSource: string,\r\n  fragmentSource: string\r\n) {\r\n  const program = gl.createProgram();\r\n  if (!program) throw \"gl.createProgram()\";\r\n\r\n  const vertexShader = getShader(gl, gl.VERTEX_SHADER, vertexSource);\r\n  const fragmentShader = getShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n\r\n  gl.linkProgram(program);\r\n\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const info = gl.getProgramInfoLog(program);\r\n    throw `Could not compile WebGL program. \\n\\n${info}`;\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\ntype RecordObject<Keys extends string[], T> = {\r\n  [Entry in Keys[number]]: T;\r\n};\r\n\r\nexport type CompiledShader<\r\n  AttributeNames extends string[],\r\n  UniformNames extends string[]\r\n> = {\r\n  program: WebGLProgram;\r\n  attribute: RecordObject<AttributeNames, number>;\r\n  uniform: RecordObject<UniformNames, WebGLUniformLocation>;\r\n};\r\n\r\ntype A = RecordObject<[\"a\", \"b\"], number>;\r\n\r\nexport function createProgram(\r\n  gl: WebGLRenderingContext,\r\n  vertexSource: string,\r\n  fragmentSource: string,\r\n  attributes: string[],\r\n  uniforms: string[]\r\n): CompiledShader<typeof attributes, typeof uniforms> {\r\n  const program = getProgram(gl, vertexSource, fragmentSource);\r\n\r\n  const attribute = Object.fromEntries(\r\n    attributes.map((name) => [name, gl.getAttribLocation(program, name)])\r\n  );\r\n\r\n  const uniform = Object.fromEntries(\r\n    uniforms.map((name) => {\r\n      const location = gl.getUniformLocation(program, name);\r\n      if (!location) throw `gl.getUniformLocation(${name})`;\r\n      return [name, location];\r\n    })\r\n  );\r\n\r\n  return { program, attribute, uniform };\r\n}\r\n", "type MapContextType = {\r\n  \"2d\": CanvasRenderingContext2D;\r\n  bitmaprenderer: ImageBitmapRenderingContext;\r\n  webgl: WebGLRenderingContext;\r\n  webgl2: WebGL2RenderingContext;\r\n};\r\n\r\ntype MapSettingsType = {\r\n  \"2d\": CanvasRenderingContext2DSettings;\r\n  bitmaprenderer: ImageBitmapRenderingContextSettings;\r\n  webgl: WebGLContextAttributes;\r\n  webgl2: WebGLContextAttributes;\r\n};\r\n\r\ntype ContextType = keyof MapContextType;\r\n\r\nexport default function getCanvasAndContext<T extends ContextType>(\r\n  type: T,\r\n  options?: MapSettingsType[T]\r\n): [HTMLCanvasElement, MapContextType[T]] {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(type, options) as MapContextType[T] | null;\r\n  if (!ctx) throw `getContext(${type})`;\r\n\r\n  return [canvas, ctx];\r\n}\r\n", "const images: Map<string, Promise<HTMLImageElement>> = new Map();\r\n\r\nexport default function getImage(src: string) {\r\n  const item = images.get(src);\r\n  if (item) return item;\r\n\r\n  const promise = new Promise<HTMLImageElement>((resolve) => {\r\n    const image = new Image();\r\n    image.addEventListener(\"load\", () => resolve(image));\r\n\r\n    image.src = src;\r\n  });\r\n  images.set(src, promise);\r\n  return promise;\r\n}\r\n", "import Vec2 from \"./Vec2\";\r\nimport getCanvasAndContext from \"../getCanvasAndContext\";\r\nimport getImage from \"../getImage\";\r\nimport { getTexture } from \"./util\";\r\n\r\nexport default class TileMapLayer {\r\n  scrollScaleX: number;\r\n  scrollScaleY: number;\r\n  tileTexture: WebGLTexture;\r\n  inverseTextureSize: Vec2;\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  data!: ImageData;\r\n  dirty: boolean;\r\n\r\n  constructor(public gl: WebGLRenderingContext) {\r\n    this.scrollScaleX = 1;\r\n    this.scrollScaleY = 1;\r\n    this.tileTexture = getTexture(gl);\r\n    this.inverseTextureSize = [0, 0];\r\n    [this.canvas, this.ctx] = getCanvasAndContext(\"2d\");\r\n    this.dirty = false;\r\n  }\r\n\r\n  setTexture(src: string, repeat?: boolean) {\r\n    const { canvas, ctx, gl, inverseTextureSize } = this;\r\n\r\n    getImage(src).then((image) => {\r\n      canvas.width = image.naturalWidth;\r\n      canvas.height = image.naturalHeight;\r\n      ctx.drawImage(image, 0, 0);\r\n      this.data = ctx.getImageData(\r\n        0,\r\n        0,\r\n        image.naturalWidth,\r\n        image.naturalHeight\r\n      );\r\n      this.refresh();\r\n\r\n      // MUST be filtered with NEAREST or tile lookup fails\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n      if (repeat) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n      } else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      }\r\n\r\n      inverseTextureSize[0] = 1 / image.width;\r\n      inverseTextureSize[1] = 1 / image.height;\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    const { data, gl, tileTexture } = this;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, tileTexture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\r\n\r\n    this.dirty = false;\r\n  }\r\n\r\n  draw(x: number, y: number, u: number, v: number) {\r\n    const { canvas, data } = this;\r\n\r\n    const i = (y * canvas.width + x) * 4;\r\n    data.data[i] = u;\r\n    data.data[i + 1] = v;\r\n    this.dirty = true;\r\n  }\r\n\r\n  get(x: number, y: number): [u: number, v: number] {\r\n    const { canvas, data } = this;\r\n\r\n    const i = (y * canvas.width + x) * 4;\r\n    return [data.data[i], data.data[i + 1]];\r\n  }\r\n\r\n  contains(x: number, y: number) {\r\n    return x >= 0 && y >= 0 && x < this.canvas.width && y < this.canvas.height;\r\n  }\r\n\r\n  dump() {\r\n    const { canvas, data } = this;\r\n\r\n    let i = 0;\r\n    const rows = [];\r\n    for (let y = 0; y < canvas.height; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < canvas.width; x++) {\r\n        const u = data.data[i];\r\n        const v = data.data[i + 1];\r\n\r\n        row.push([u, v]);\r\n        i += 4;\r\n      }\r\n\r\n      rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n  }\r\n}\r\n", "import { CompiledShader, createProgram, getBuffer, getTexture } from \"./util\";\r\n\r\nimport TileMapLayer from \"./TileMapLayer\";\r\nimport Vec2 from \"./Vec2\";\r\nimport fragmentSource from \"./tilemap.frag.shader\";\r\nimport getImage from \"../getImage\";\r\nimport vertexSource from \"./tilemap.vert.shader\";\r\n\r\nexport default class TileMap {\r\n  viewportSize: Vec2;\r\n  scaledViewportSize: Vec2;\r\n  inverseTileTextureSize: Vec2;\r\n  inverseSpriteTextureSize: Vec2;\r\n  tileScale: number;\r\n  tileSize: number;\r\n  filtered: boolean;\r\n  spriteSheet: WebGLTexture;\r\n  layers: TileMapLayer[];\r\n  quadVertBuffer: WebGLBuffer;\r\n  tilemapShader: CompiledShader<\r\n    [\"position\", \"texture\"],\r\n    [\r\n      \"tileSize\",\r\n      \"inverseTileSize\",\r\n      \"viewportSize\",\r\n      \"inverseSpriteTextureSize\",\r\n      \"sprites\",\r\n      \"tiles\",\r\n      \"viewOffset\",\r\n      \"inverseTileTextureSize\"\r\n    ]\r\n  >;\r\n\r\n  constructor(public gl: WebGLRenderingContext) {\r\n    this.viewportSize = [0, 0];\r\n    this.scaledViewportSize = [0, 0];\r\n    this.inverseTileTextureSize = [0, 0];\r\n    this.inverseSpriteTextureSize = [0, 0];\r\n\r\n    this.tileScale = 1.0;\r\n    this.tileSize = 16;\r\n\r\n    this.filtered = false;\r\n\r\n    this.spriteSheet = getTexture(gl);\r\n    this.layers = [];\r\n\r\n    const quadVerts = [\r\n      //x  y  u  v\r\n      [-1, -1, 0, 1],\r\n      [1, -1, 1, 1],\r\n      [1, 1, 1, 0],\r\n\r\n      [-1, -1, 0, 1],\r\n      [1, 1, 1, 0],\r\n      [-1, 1, 0, 0],\r\n    ].flat();\r\n\r\n    this.quadVertBuffer = getBuffer(gl);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVertBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(quadVerts), gl.STATIC_DRAW);\r\n\r\n    this.tilemapShader = createProgram(\r\n      gl,\r\n      vertexSource,\r\n      fragmentSource,\r\n      [\"position\", \"texture\"],\r\n      [\r\n        \"tileSize\",\r\n        \"inverseTileSize\",\r\n        \"viewportSize\",\r\n        \"inverseSpriteTextureSize\",\r\n        \"sprites\",\r\n        \"tiles\",\r\n        \"viewOffset\",\r\n        \"inverseTileTextureSize\",\r\n      ]\r\n    );\r\n  }\r\n\r\n  public resizeViewport(width: number, height: number) {\r\n    this.viewportSize[0] = width;\r\n    this.viewportSize[1] = height;\r\n\r\n    this.scaledViewportSize[0] = width / this.tileScale;\r\n    this.scaledViewportSize[1] = height / this.tileScale;\r\n  }\r\n\r\n  public setTileScale(scale: number) {\r\n    this.tileScale = scale;\r\n\r\n    this.scaledViewportSize[0] = this.viewportSize[0] / scale;\r\n    this.scaledViewportSize[1] = this.viewportSize[1] / scale;\r\n  }\r\n\r\n  public setFiltered(filtered: boolean) {\r\n    const { gl } = this;\r\n    this.filtered = filtered;\r\n\r\n    // TODO: Cache currently bound texture?\r\n    gl.bindTexture(gl.TEXTURE_2D, this.spriteSheet);\r\n\r\n    if (filtered) {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); // Worth it to mipmap here?\r\n    }\r\n  }\r\n\r\n  public setSpriteSheet(src: string) {\r\n    const { gl } = this;\r\n    getImage(src).then((image) => {\r\n      gl.bindTexture(gl.TEXTURE_2D, this.spriteSheet);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,\r\n        gl.RGBA,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        image\r\n      );\r\n      if (!this.filtered) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      } else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); // Worth it to mipmap here?\r\n      }\r\n\r\n      this.inverseSpriteTextureSize[0] = 1 / image.width;\r\n      this.inverseSpriteTextureSize[1] = 1 / image.height;\r\n    });\r\n  }\r\n\r\n  public addTileLayer(\r\n    src: string,\r\n    layerId: number,\r\n    scrollScaleX?: number,\r\n    scrollScaleY?: number\r\n  ) {\r\n    const layer = new TileMapLayer(this.gl);\r\n    layer.setTexture(src);\r\n    if (scrollScaleX) {\r\n      layer.scrollScaleX = scrollScaleX;\r\n    }\r\n    if (scrollScaleY) {\r\n      layer.scrollScaleY = scrollScaleY;\r\n    }\r\n\r\n    this.layers[layerId] = layer;\r\n    return layer;\r\n  }\r\n\r\n  public draw(x: number, y: number) {\r\n    const {\r\n      gl,\r\n      inverseSpriteTextureSize,\r\n      layers,\r\n      quadVertBuffer,\r\n      scaledViewportSize,\r\n      spriteSheet,\r\n      tilemapShader: shader,\r\n      tileScale,\r\n      tileSize,\r\n    } = this;\r\n\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    gl.useProgram(shader.program);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, quadVertBuffer);\r\n\r\n    gl.enableVertexAttribArray(shader.attribute.position);\r\n    gl.enableVertexAttribArray(shader.attribute.texture);\r\n    gl.vertexAttribPointer(\r\n      shader.attribute.position,\r\n      2,\r\n      gl.FLOAT,\r\n      false,\r\n      16,\r\n      0\r\n    );\r\n    gl.vertexAttribPointer(shader.attribute.texture, 2, gl.FLOAT, false, 16, 8);\r\n\r\n    gl.uniform2fv(shader.uniform.viewportSize, scaledViewportSize);\r\n    gl.uniform2fv(\r\n      shader.uniform.inverseSpriteTextureSize,\r\n      inverseSpriteTextureSize\r\n    );\r\n    gl.uniform1f(shader.uniform.tileSize, tileSize);\r\n    gl.uniform1f(shader.uniform.inverseTileSize, 1 / tileSize);\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.uniform1i(shader.uniform.sprites, 0);\r\n    gl.bindTexture(gl.TEXTURE_2D, spriteSheet);\r\n\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.uniform1i(shader.uniform.tiles, 1);\r\n\r\n    // Draw each layer of the map\r\n    for (let i = layers.length; i >= 0; --i) {\r\n      const layer = layers[i];\r\n      if (layer) {\r\n        if (layer.dirty) layer.refresh();\r\n\r\n        gl.uniform2f(\r\n          shader.uniform.viewOffset,\r\n          Math.floor(x * tileScale * layer.scrollScaleX),\r\n          Math.floor(y * tileScale * layer.scrollScaleY)\r\n        );\r\n        gl.uniform2fv(\r\n          shader.uniform.inverseTileTextureSize,\r\n          layer.inverseTextureSize\r\n        );\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, layer.tileTexture);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import TileMap from \"./renderer/TileMap\";\r\nimport getCanvasAndContext from \"./getCanvasAndContext\";\r\nimport getImage from \"./getImage\";\r\nimport mapUrl from \"../res/map.png\";\r\nimport tilesUrl from \"../res/tiles.png\";\r\n\r\nconst tileSize = 16;\r\nconst tileScale = 2;\r\n\r\nfunction init() {\r\n  const container = document.createElement(\"div\");\r\n  container.id = \"main\";\r\n  document.body.append(container);\r\n\r\n  const panel = document.createElement(\"div\");\r\n  panel.id = \"panel\";\r\n\r\n  const selector = document.createElement(\"div\");\r\n  selector.id = \"selector\";\r\n  selector.style.width = `${tileSize * tileScale}px`;\r\n  selector.style.height = `${tileSize * tileScale}px`;\r\n\r\n  const [tilesCanvas, tiles2d] = getCanvasAndContext(\"2d\");\r\n  panel.append(tilesCanvas);\r\n  panel.append(selector);\r\n\r\n  let tileX = NaN;\r\n  let tileY = NaN;\r\n  const chooseTile = (x: number, y: number) => {\r\n    tileX = x;\r\n    tileY = y;\r\n\r\n    const size = tileSize * tileScale;\r\n    selector.style.left = `${x * size}px`;\r\n    selector.style.top = `${y * size}px`;\r\n  };\r\n\r\n  getImage(tilesUrl).then((image) => {\r\n    const width = image.naturalWidth * tileScale;\r\n    const height = image.naturalHeight * tileScale;\r\n\r\n    tilesCanvas.width = width;\r\n    tilesCanvas.height = height;\r\n    panel.style.flexBasis = `${width}px`;\r\n    tiles2d.imageSmoothingEnabled = false;\r\n    tiles2d.drawImage(image, 0, 0, width, height);\r\n    chooseTile(0, 0);\r\n\r\n    tilesCanvas.addEventListener(\"click\", (e) => {\r\n      const size = tileSize * tileScale;\r\n      const x = Math.floor(e.offsetX / size);\r\n      const y = Math.floor(e.offsetY / size);\r\n      chooseTile(x, y);\r\n    });\r\n\r\n    main.addEventListener(\"click\", (e) => {\r\n      const size = tileSize * tileScale;\r\n      const x = Math.floor(e.offsetX / size);\r\n      const y = Math.floor(e.offsetY / size);\r\n      if (map.contains(x, y)) {\r\n        const [u, v] = map.get(x, y);\r\n        if (tileX === u && tileY === v) map.draw(x, y, 255, 255);\r\n        else map.draw(x, y, tileX, tileY);\r\n      }\r\n    });\r\n\r\n    onResize();\r\n  });\r\n\r\n  const [main, gl] = getCanvasAndContext(\"webgl\");\r\n  main.id = \"game\";\r\n  gl.clearColor(0.0, 0.0, 0.1, 1.0);\r\n  gl.clearDepth(1.0);\r\n\r\n  const tm = new TileMap(gl);\r\n  tm.setSpriteSheet(tilesUrl);\r\n  tm.tileSize = tileSize;\r\n  tm.setTileScale(tileScale);\r\n  const map = tm.addTileLayer(mapUrl, 0);\r\n\r\n  const getMainSize = () => {\r\n    const width = window.innerWidth - tilesCanvas.width;\r\n    const height = window.innerHeight;\r\n\r\n    return [width / window.devicePixelRatio, height / window.devicePixelRatio];\r\n  };\r\n\r\n  const onResize = () => {\r\n    const [width, height] = getMainSize();\r\n\r\n    main.width = width;\r\n    main.height = height;\r\n    gl.viewport(0, 0, width, height);\r\n    tm.resizeViewport(width, height);\r\n  };\r\n  window.addEventListener(\"resize\", onResize);\r\n  requestAnimationFrame(onResize);\r\n\r\n  const draw = () => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    tm.draw(0, 0);\r\n  };\r\n\r\n  const tick = (time: number) => {\r\n    draw();\r\n    requestAnimationFrame(tick);\r\n  };\r\n  requestAnimationFrame(tick);\r\n\r\n  (window as any).g = tm;\r\n\r\n  container.append(panel, main);\r\n}\r\n\r\nwindow.addEventListener(\"load\", init);\r\n"],
  "mappings": "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",
  "names": ["tileScale", "tileSize"]
}
